trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - pipelines/*
      - iac/*

variables: 
  solution: '*.sln'
  frontEndDirectory: 'src/conduit-front-end'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  AppName: 'conduit-on-web'
  TerraformBackend.ResourceGroup: rg-conduit-on-web-shared-001
  TerraformBackend.StorageAccount: strconduitonwebtfrm01
  TerraformBackend.ContainerName: staging
  AzureServiceConnection: nebbia-partner-service-connection

pool:
  vmImage: 'windows-latest'

stages:
- stage: build
  displayName: Build
  jobs: 
  - job: job_build_api
    displayName: 'Build Backend'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)/backend"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - publish: $(Build.ArtifactStagingDirectory)/backend
      artifact: backend
      displayName: Publish Backend Artifacts
  
  - job: job_build_front_end
    displayName: 'Build Frontend'
    pool: 
      vmImage: 'ubuntu-latest'
    steps: 

    - task: Npm@1
      displayName: 'Restore'
      inputs:
        command: 'install'
        workingDir: $(frontEndDirectory)

    - task: Npm@1
      displayName: 'Build'
      inputs:
        command: 'custom'
        workingDir: $(frontEndDirectory)
        customCommand: run build

    - task: CopyFiles@2
      displayName: Copy Files to Artifacts Staging
      inputs:
         sourceFolder: $(frontEndDirectory)/dist
         contents: '**' 
         targetFolder: $(Build.ArtifactStagingDirectory)/frontend
        
    - publish: $(Build.ArtifactStagingDirectory)/frontend
      artifact: frontend
      displayName: Publish Frontend Artifacts

- stage: deploy
  displayName: Staging
  dependsOn: ['build']
  jobs: 
  - job: job_staging_iac
    displayName: 'Staging Infrastructure'
    pool: 
      vmImage: 'ubuntu-latest'
    steps:
      - task: AzureCLI@2
        displayName: "Azure Terraform Backend"
        inputs:
          azureSubscription: $(AzureServiceConnection)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az group create --location eastus --name $(TerraformBackend.ResourceGroup)
            
            az storage account create --name $(TerraformBackend.StorageAccount) --resource-group $(TerraformBackend.ResourceGroup) --location eastus --sku Standard_LRS
            
            az storage container create --name staging --account-name $(TerraformBackend.StorageAccount)

            STORAGE_ACCOUNT_KEY=$(az storage account keys list -g $(TerraformBackend.ResourceGroup) -n $(TerraformBackend.StorageAccount) | jq ".[0].value" -r)

            echo "setting storage account key variable"
            echo "##vso[task.setvariable variable=ARM_ACCESS_KEY;issecret=true]$STORAGE_ACCOUNT_KEY"

      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '0.12.20'

      - task: TerraformTaskV1@0
        displayName: "Terraform Init"
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: $(AzureServiceConnection)
          backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
          backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
          backendAzureRmContainerName: '$(TerraformBackend.ContainerName)'
          backendAzureRmKey: 'infrastructure/terraform.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/iac/'

      - task: TerraformTaskV1@0
        displayName: "Terraform Plan"
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/iac/'
          environmentServiceNameAzureRM: $(AzureServiceConnection)
          commandOptions: |
            -var "location=eastus" -var "environment=staging" -var "app_name=$(AppName)"

      - task: TerraformTaskV1@0
        displayName: "Terraform Apply"
        name:  TerraformApply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/iac/'
          environmentServiceNameAzureRM: $(AzureServiceConnection)
          commandOptions: |
            -var "location=eastus" -var "environment=staging" -var "app_name=$(AppName)"

      - bash: |
          APP_SERVICE_NAME=$(cat $(TerraformApply.jsonOutputVariablesPath) | jq '.app_service.value' -r)
          echo "##vso[task.setvariable variable=Outputs.AppServiceName;isOutput=true]$APP_SERVICE_NAME"

          STORAGE_ACCOUNT_NAME=$(cat $(TerraformApply.jsonOutputVariablesPath) | jq '.storage_account.value' -r)
          echo "##vso[task.setvariable variable=Outputs.StorageAccountName;isOutput=true]$STORAGE_ACCOUNT_NAME"

          APP_INSIGHTS_INSTRUMENTATION_KEY=$(cat $(TerraformApply.jsonOutputVariablesPath) | jq '.app_insights_instrumentation_key.value' -r)
          echo "##vso[task.setvariable variable=Outputs.AppInsightsInstrumentationKey;isOutput=true]$APP_INSIGHTS_INSTRUMENTATION_KEY"

        name: TerraformOutputs
        displayName: Parsing Terraform Outputs

  - job: job_staging_deploy_api
    displayName: 'Staging Deploy API'
    dependsOn: ['job_staging_iac']
    pool: 
      vmImage: 'windows-latest'
    variables:
      appServiceName: $[ dependencies.job_staging_iac.outputs['TerraformOutputs.Outputs.AppServiceName'] ]
    steps:
    - checkout: none
    - download: current
      artifact: backend    
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'nebbia-partner-service-connection'
        appType: 'webApp'
        WebAppName: '$(appServiceName)'
        packageForLinux: '$(Pipeline.Workspace)/backend/*.zip'

  - job: job_staging_deploy_frontend
    displayName: 'Staging Deploy Frontend'
    dependsOn: ['job_staging_iac']
    pool: 
      vmImage: 'windows-latest'
    variables:
      storageAccountName: $[ dependencies.job_staging_iac.outputs['TerraformOutputs.Outputs.StorageAccountName'] ]
      appInsightsInstrumentationKey: $[ dependencies.job_staging_iac.outputs['TerraformOutputs.Outputs.AppInsightsInstrumentationKey'] ]
    steps:
    - checkout: none
    - download: current
      artifact: frontend
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          ((Get-Content -path $(Pipeline.Workspace)/frontend/index.html -Raw) -replace 'INSTRUMENTATION_KEY', "$($env:appInsightsInstrumentationKey)") | Set-Content -Path $(Pipeline.Workspace)/frontend/index.html
    - task: AzureFileCopy@4
      inputs:
        SourcePath: '$(Pipeline.Workspace)/frontend/*'
        azureSubscription: 'nebbia-partner-service-connection'
        Destination: 'AzureBlob'
        storage: '$(storageAccountName)'
        ContainerName: '$web'
